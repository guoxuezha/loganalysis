package com.gem.loganalysis.service.impl;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gem.loganalysis.config.GSAClientAgentService;
import com.gem.loganalysis.model.vo.HostsSeverityJSON;
import com.gem.loganalysis.model.vo.HostsSeverityVO;
import com.gem.loganalysis.model.vo.VulnCountVO;
import com.gem.loganalysis.model.vo.VulnDataVO;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityJson;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityScanningVO;
import com.gem.loganalysis.service.VulnerabilityService;
import com.gem.loganalysis.util.JsonUtils;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 漏洞相关
 *
 * @author czw
 * @since 2023-06-16
 */
@Service
@Slf4j
public class VulnerabilityServiceImpl implements VulnerabilityService {

    private GSAClientAgentService gsaClientAgentService;

    @Autowired
    public VulnerabilityServiceImpl(GSAClientAgentService gsaClientAgentService) {
        this.gsaClientAgentService = gsaClientAgentService;
    }

    //网络安全设备脆弱性数据排名前5
    public List<Map.Entry<String, Double>> getNetSecurityDeviceTop5() {
        JSONObject jsonObject = gsaClientAgentService.getNetSecurityDeviceSeverities();

        //避免空指针
        if (jsonObject == null) {
            return new ArrayList<>();
        }
        // 将 JSONObject 数据转换为 Map
        Map<String, Double> data = JsonUtils.parseObject(jsonObject.toString()
                , new TypeReference<Map<String, Double>>() {
                });

        // 按值（漏洞严重性）从大到小排序
        List<Map.Entry<String, Double>> sortedList = new ArrayList<>(data.entrySet());
        sortedList.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));

        // 只保留排名前 5 的数据
        int topN = 5;
        if (sortedList.size() > topN) {
            sortedList = sortedList.subList(0, topN);
        }
        return sortedList;
    }

    @Override
    public List<HostsSeverityVO> getDeviceTop() {
        JSONObject jsonObject = gsaClientAgentService.getHostsSeverity();

        if (jsonObject == null) {
            return new ArrayList<HostsSeverityVO>();
        }
        HostsSeverityJSON data = JsonUtils.parseObject(jsonObject.toString()
                , HostsSeverityJSON.class);
        List<HostsSeverityVO> hosts = data.getHosts();
/*        HostsSeverityJSON hostSeverity = new HostsSeverityJSON();
        hostSeverity.setSeverity(jsonObject.getDouble("severity"));

        List<HostsSeverityVO> hosts = new ArrayList<>();
        JSONArray hostsArray = jsonObject.getJSONArray("hosts");
        for (int i = 0; i < hostsArray.length(); i++) {
            JSONObject hostObject = hostsArray.getJSONObject(i);
            HostsSeverityVO host = new HostsSeverityVO();
            host.setSeverity(hostObject.getDouble("severity"));
            host.setGvmAssetId(hostObject.getString("gvmAssetId"));
            host.setModificationTime(hostObject.getString("modificationTime"));
            host.setIp(hostObject.getString("ip"));
            host.setComment(hostObject.getString("comment"));
            if (hostObject.has("os")) {
                host.setOs(hostObject.getString("os"));
            }
            hosts.add(host);
        }
        hostSeverity.setHosts(hosts);*/
        return hosts.stream()
                .sorted(Comparator.comparingDouble(HostsSeverityVO::getSeverity).reversed())
                .collect(Collectors.toList());
    }

    @Override
    public VulnDataVO getAggregateForVulnBySeverity() throws JSONException {
        JSONObject jsonObject = gsaClientAgentService.getAggregateForVulnBySeverity();
        if (jsonObject == null) {
            return new VulnDataVO();
        }
       /* VulnDataVO vulnData = JsonUtils.parseObject(jsonObject.toString()
                , VulnDataVO.class);*/
        VulnDataVO vulnData = new VulnDataVO();

        // 设置 VulnData 的字段值
        vulnData.setDate(jsonObject.getString("date"));
        vulnData.setScore(jsonObject.getDouble("score"));
        vulnData.setHigh(jsonObject.getInt("high"));
        vulnData.setMiddle(jsonObject.getInt("middle"));
        vulnData.setLog(jsonObject.getInt("log"));
        vulnData.setLow(jsonObject.getInt("low"));

        JSONArray vulnCountArray;
        try {
            vulnCountArray = jsonObject.getJSONArray("vuln_count");
        } catch (JSONException e) {
            return vulnData;
        }
        List<VulnCountVO> vulnCountList = new ArrayList<>();

        // 遍历 vuln_count 数组并封装 VulnCount 对象
        for (int i = 0; i < vulnCountArray.length(); i++) {
            JSONObject vulnCountObj = vulnCountArray.getJSONObject(i);
            VulnCountVO vulnCount = new VulnCountVO();
            vulnCount.setCount(vulnCountObj.getString("count"));
            vulnCount.setValue(vulnCountObj.getString("value"));
            vulnCount.setCCount(vulnCountObj.getString("c_count"));
            vulnCountList.add(vulnCount);
        }

        vulnData.setVulnCountList(vulnCountList);
        return vulnData;
    }

    @Override
    public List<VulnerabilityScanningVO> getAggregateForResultBySeverity() throws JSONException {
        JSONObject jsonObject = gsaClientAgentService.getAggregateForResultBySeverity();
        //太麻烦了 换方法
       /* VulnerabilityJson json = new VulnerabilityJson();
        json.setDate(jsonObject.getString("date"));
        json.setResults(parseResults(jsonObject.getJSONArray("results")));
            return json.getResults();*/
        if (jsonObject == null) {
            return new ArrayList<>();
        }
        VulnerabilityJson data = JsonUtils.parseObject(jsonObject.toString()
                , VulnerabilityJson.class);
        assert data != null;
        return data.getResults();
    }

/*
    // 解析 Results 数组
    private List<VulnerabilityScanningVO> parseResults(JSONArray jsonArray) throws JSONException, ParseException {
        List<VulnerabilityScanningVO> results = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject resultObj = jsonArray.getJSONObject(i);
            VulnerabilityScanningVO result = new VulnerabilityScanningVO();
            result.setCreation_time(parseDate(resultObj.getString("creation_time")));
            result.setSeverity(resultObj.getDouble("severity"));
            result.setHost_ip(resultObj.getString("host_ip"));
            result.setResultId(resultObj.getString("resultId"));
            result.setGvm_asset_id(resultObj.getString("gvm_asset_id"));
            result.setOriginal_severity(resultObj.getString("original_severity"));
            result.setQod(parseQod(resultObj.getJSONObject("qod")));
            result.setDescription(resultObj.getString("description"));
            result.setScan_nvt_version(resultObj.getString("scan_nvt_version"));
            result.setNvt(parseNvt(resultObj.getJSONObject("nvt")));
            result.setOriginal_threat(resultObj.getString("original_threat"));
            result.setHostname(resultObj.getString("hostname"));
            result.setPort(resultObj.getString("port"));
            result.setName(resultObj.getString("name"));
            result.setComment(resultObj.getString("comment"));
            result.setThreat(resultObj.getString("threat"));
            result.setModification_time(parseDate(resultObj.getString("modification_time")));
            results.add(result);
        }
        return results;
    }

    private Date parseDate(String dateString) throws ParseException {
        if (dateString == null || dateString.isEmpty()) {
            return null;
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return format.parse(dateString);
    }

    // 解析 Qod 对象
    private Qod parseQod(JSONObject jsonObject) throws JSONException {
        Qod qod = new Qod();
        qod.setType(jsonObject.getString("type"));
        qod.setValue(jsonObject.getString("value"));
        return qod;
    }

    // 解析 Nvt 对象
    private Nvt parseNvt(JSONObject jsonObject) throws JSONException {
        Nvt nvt = new Nvt();
        nvt.setName(jsonObject.getString("name"));
        nvt.setOid(jsonObject.getString("oid"));
        nvt.setType(jsonObject.getString("type"));
        nvt.setFamily(jsonObject.getString("family"));
        nvt.setSeverities(parseSeverities(jsonObject.getJSONArray("severities")));
        nvt.setTags(jsonObject.getString("tags"));
        nvt.setRefs(parseRefs(jsonObject.getJSONArray("refs")));
        return nvt;
    }

    //解析REF
    private List<Ref> parseRefs(JSONArray jsonArray) throws JSONException {
        List<Ref> refs = new ArrayList<>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject refObj = jsonArray.getJSONObject(i);
            Ref ref = new Ref();
            ref.setId(refObj.getString("id"));
            ref.setType(refObj.getString("type"));
            refs.add(ref);
        }
        return refs;
    }

    // 解析 Severities 数组
    private List<Severity> parseSeverities(JSONArray jsonArray) throws JSONException {
        List<Severity> severities = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject severityObj = jsonArray.getJSONObject(i);
            Severity severity = new Severity();
            severity.setOrigin(severityObj.getString("origin"));
            severity.setType(severityObj.getString("type"));
            severities.add(severity);
        }
        return severities;
    }*/

}
