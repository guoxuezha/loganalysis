package com.gem.loganalysis.service.impl;

import com.gem.loganalysis.config.GSAClientAgentService;
import com.gem.loganalysis.model.vo.HostsSeverityJSON;
import com.gem.loganalysis.model.vo.HostsSeverityVO;
import com.gem.loganalysis.model.vo.VulnCountVO;
import com.gem.loganalysis.model.vo.VulnDataVO;
import com.gem.loganalysis.service.VulnerabilityService;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;


/**
 * 漏洞相关
 *
 * @author czw
 * @since 2023-06-16
 */
@Service
@Slf4j
public class VulnerabilityServiceImpl implements VulnerabilityService {

    private GSAClientAgentService gsaClientAgentService;

    @Autowired
    public VulnerabilityServiceImpl(GSAClientAgentService gsaClientAgentService) {
        this.gsaClientAgentService = gsaClientAgentService;
    }

    //网络安全设备脆弱性数据排名前5
    public List<Map.Entry<String, Double>> getNetSecurityDeviceTop5() throws JSONException {
        JSONObject jsonObject = gsaClientAgentService.getNetSecurityDeviceSeverities();
        System.out.println("jsonObject"+jsonObject);
        // 将 JSONObject 数据转换为 Map
        Map<String, Double> data = new HashMap<>();
        Iterator<String> keys = jsonObject.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            double value = jsonObject.getDouble(key);
            data.put(key, value);
        }

        // 按值（漏洞严重性）从大到小排序
        List<Map.Entry<String, Double>> sortedList = new ArrayList<>(data.entrySet());
        sortedList.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));

        // 只保留排名前 5 的数据
        int topN = 5;
        if (sortedList.size() > topN) {
            sortedList = sortedList.subList(0, topN);
        }
        return sortedList;
    }

    @Override
    public List<HostsSeverityVO> getDeviceTop() throws JSONException {
        JSONObject jsonObject = gsaClientAgentService.getHostsSeverity();

        HostsSeverityJSON hostSeverity = new HostsSeverityJSON();
        hostSeverity.setSeverity(jsonObject.getDouble("severity"));

        List<HostsSeverityVO> hosts = new ArrayList<>();
        JSONArray hostsArray = jsonObject.getJSONArray("hosts");
        for (int i = 0; i < hostsArray.length(); i++) {
            JSONObject hostObject = hostsArray.getJSONObject(i);
            HostsSeverityVO host = new HostsSeverityVO();
            host.setSeverity(hostObject.getDouble("severity"));
            host.setGvmAssetId(hostObject.getString("gvmAssetId"));
            host.setModificationTime(hostObject.getString("modificationTime"));
            host.setIp(hostObject.getString("ip"));
            host.setComment(hostObject.getString("comment"));
            if (hostObject.has("os")) {
                host.setOs(hostObject.getString("os"));
            }
            hosts.add(host);
        }
        hostSeverity.setHosts(hosts);
        return hosts.stream()
                .sorted(Comparator.comparingDouble(HostsSeverityVO::getSeverity).reversed())
                .collect(Collectors.toList());
    }

    @Override
    public VulnDataVO getAggregateForVulnBySeverity() throws JSONException {
        JSONObject jsonObject = gsaClientAgentService.getAggregateForVulnBySeverity();
        VulnDataVO vulnData = new VulnDataVO();

        // 设置 VulnData 的字段值
        vulnData.setDate(jsonObject.getString("date"));
        vulnData.setScore(jsonObject.getDouble("score"));
        vulnData.setHigh(jsonObject.getInt("high"));
        vulnData.setMiddle(jsonObject.getInt("middle"));
        vulnData.setLog(jsonObject.getInt("log"));
        vulnData.setLow(jsonObject.getInt("low"));

        JSONArray vulnCountArray = jsonObject.getJSONArray("vuln_count");
        List<VulnCountVO> vulnCountList = new ArrayList<>();

        // 遍历 vuln_count 数组并封装 VulnCount 对象
        for (int i = 0; i < vulnCountArray.length(); i++) {
            JSONObject vulnCountObj = vulnCountArray.getJSONObject(i);
            VulnCountVO vulnCount = new VulnCountVO();
            vulnCount.setCount(vulnCountObj.getString("count"));
            vulnCount.setValue(vulnCountObj.getString("value"));
            vulnCount.setCCount(vulnCountObj.getString("c_count"));
            vulnCountList.add(vulnCount);
        }

        vulnData.setVulnCountList(vulnCountList);
        return vulnData;
    }


}
