package com.gem.loganalysis.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.gem.loganalysis.config.GSAClientAgentService;
import com.gem.loganalysis.gsaclient.GSACommand;
import com.gem.loganalysis.gsaclient.GVMScanReport;
import com.gem.loganalysis.gsaclient.GVMScanTask;
import com.gem.loganalysis.model.*;
import com.gem.loganalysis.model.dto.*;
import com.gem.loganalysis.model.dto.query.VulnerabilityQueryDTO;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityJson;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityScanningVO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.InputStream;
import java.util.*;

@Api(tags = "风险模块 - 漏洞扫描")
@RestController
@RequestMapping("/sop/vulnerability")
@Validated
public class VulnerabilityController {

    private GSAClientAgentService gsaClientAgentService;

    @Autowired
    public VulnerabilityController(GSAClientAgentService gsaClientAgentService) {
        this.gsaClientAgentService = gsaClientAgentService;
    }

    @PostMapping("/vulnerabilityScannerResult")
    @ApiOperation("漏洞扫描结果")
    public Result<PageResponse<VulnerabilityScanningVO>> getVulnerabilityScannerResult(@RequestBody PageRequest<VulnerabilityQueryDTO> dto) {
        try {
            // 使用ClassLoader加载资源文件
            InputStream inputStream = getClass().getClassLoader().getResourceAsStream("ScanResultBySeverity.json");

            // 将InputStream转换为字符串
            StringBuilder stringBuilder = new StringBuilder();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                stringBuilder.append(new String(buffer, 0, bytesRead));
            }
            String jsonString = stringBuilder.toString();
            ObjectMapper mapper = new ObjectMapper();
            VulnerabilityJson dataStructure = mapper.readValue(jsonString, VulnerabilityJson.class);
            // 关闭输入流
            inputStream.close();
            // 处理解析后的数据结构对象
            List<VulnerabilityScanningVO> resultList = dataStructure.getResults();
            // 模糊查询后输出
            VulnerabilityQueryDTO data = dto.getData();
            List<VulnerabilityScanningVO> filteredResults = new ArrayList<>();
            for (VulnerabilityScanningVO result : resultList) {
                boolean isMatched = true;
                if (StringUtils.isNotBlank(data.getHostIp()) && !result.getHost_ip().contains(data.getHostIp())) {
                    isMatched = false;
                }
                if (StringUtils.isNotBlank(data.getName()) && !result.getName().contains(data.getName())) {
                    isMatched = false;
                }
                if (StringUtils.isNotBlank(data.getPort()) && !result.getPort().contains(data.getPort())) {
                    isMatched = false;
                }
                if (isMatched) {
                    filteredResults.add(result);
                }
            }
            // 按照 severity 进行排序
            filteredResults.sort(Comparator.comparing(VulnerabilityScanningVO::getSeverity).reversed());
            Integer pageNum = dto.getPageNum();
            Integer pageSize = dto.getPageSize();

            // 计算索引范围
            int startIndex = (pageNum - 1) * pageSize;
            int endIndex = Math.min(startIndex + pageSize, filteredResults.size());

            // 截取指定页的数据
            List<VulnerabilityScanningVO> paginatedResults = filteredResults.subList(startIndex, endIndex);
            PageResponse response = new PageResponse();
            response.setRecords(paginatedResults);
            response.setTotal(filteredResults.size());
            return Result.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            return Result.failed("处理失败");
        }
    }


    @PostMapping("/getAggregateForVulnBySeverity")
    @ApiOperation("获取风险统计")
    public Result<String> getAggregateForVulnBySeverity() {
        JSONObject aggregateForVulnBySeverity = gsaClientAgentService.getAggregateForVulnBySeverity();
        return Result.ok(aggregateForVulnBySeverity!=null?aggregateForVulnBySeverity.toString():"");
    }

    @PostMapping("/getHostsSeverity")
    @ApiOperation("获取主机脆弱性")
    public Result<String> getHostsSeverity() {
        JSONObject hostsSeverity = gsaClientAgentService.getHostsSeverity();
        return Result.ok(hostsSeverity!=null?hostsSeverity.toString():"");
    }

    @PostMapping("/getGVMScanReport")
    @ApiOperation("根据reportId获取指定扫描报告")
    public Result<GVMScanReport> getGVMScanReport(@RequestBody ReportIdDTO dto) {
        return Result.ok(gsaClientAgentService.getGVMScanReport(dto.getReportId()));
    }

    @PostMapping("/getAggregateForResultBySeverity")
    @ApiOperation("获取按照漏洞严重性进行聚合的结果")
    public Result<String> getAggregateForResultBySeverity() {
        JSONObject aggregateForResultBySeverity = gsaClientAgentService.getAggregateForResultBySeverity();
        return Result.ok(aggregateForResultBySeverity!=null?aggregateForResultBySeverity.toString():"");
    }

    @PostMapping("/getNetSecurityDeviceSeverities")
    @ApiOperation("得到网络安全设备脆弱性数据")
    public Result<String> getNetSecurityDeviceSeverities() {
        JSONObject netSecurityDeviceSeverities = gsaClientAgentService.getNetSecurityDeviceSeverities();
        return Result.ok(netSecurityDeviceSeverities!=null?netSecurityDeviceSeverities.toString():"");
    }

    @PostMapping("/createHost")
    @ApiOperation("createHost")
    public Result<String> createHost(@RequestBody IpCommonDTO dto) {
        return Result.ok(gsaClientAgentService.createHost(dto.getIp(),dto.getComment()));
    }

    @PostMapping("/deleteHost")
    @ApiOperation("deleteHost")
    public Result<Boolean> deleteHost(@RequestBody HostDTO dto) {
        return Result.ok(gsaClientAgentService.deleteHost(dto.getHost()));
    }
    @PostMapping("/importHosts")
    @ApiOperation("importHosts")
    public Result<String> importHosts(@RequestBody HostsMapDTO dto) {
        gsaClientAgentService.importHosts(dto.getHosts());
        return Result.ok("导入成功");
    }
    @PostMapping("/getHosts")
    @ApiOperation("getHosts")
    public Result<String> getHosts() {
        return Result.ok(gsaClientAgentService.getHosts());
    }
    @PostMapping("/createTarget")
    @ApiOperation("createTarget")
    public Result<String> createTarget(@RequestBody HostDTO dto) {
        return Result.ok(gsaClientAgentService.createTarget(dto.getHost()));
    }
    @PostMapping("/deleteTarget")
    @ApiOperation("deleteTarget")
    public Result<Boolean> deleteTarget(@RequestBody HostDTO dto) {
        return Result.ok(gsaClientAgentService.deleteTarget(dto.getHost()));
    }
    @PostMapping("/getTargets")
    @ApiOperation("getTargets")
    public Result<String> getTargets() {
        return Result.ok(gsaClientAgentService.getTargets());
    }

    @PostMapping("/getConfigs")
    @ApiOperation("getConfigs")
    public Result<String> getConfigs() {
        return Result.ok(gsaClientAgentService.getConfigs());
    }

    @PostMapping("/getPortLists")
    @ApiOperation("getPortLists")
    public Result<String> getPortLists() {
        return Result.ok(gsaClientAgentService.getPortLists());
    }

    @PostMapping("/getScanners")
    @ApiOperation("getScanners")
    public Result<String> getScanners() {
        return Result.ok(gsaClientAgentService.getPortLists());
    }


    @PostMapping("/createTask")
    @ApiOperation("createTask")
    public Result<String> createTask(@RequestBody HostTargetIdDTO dto) {
        return Result.ok(gsaClientAgentService.createTask(dto.getHost(),dto.getTargetId()));

    }

    @PostMapping("/deleteTask")
    @ApiOperation("deleteTask")
    public Result<Boolean> deleteTask(@RequestBody TaskIdDTO dto) {
        return Result.ok(gsaClientAgentService.deleteTask(dto.getTaskId()));
    }

    @PostMapping("/getTasks")
    @ApiOperation("getTasks")
    public Result<String> getTasks() {
        return Result.ok(gsaClientAgentService.getTasks());

    }

    @PostMapping("/getTask")
    @ApiOperation("getTask")
    public Result<String> getTask(@RequestBody TaskIdDTO dto) {
        JSONObject task = gsaClientAgentService.getTask(dto.getTaskId());
        return Result.ok(task!=null?task.toString():"");
    }

    @PostMapping("/getGVMScanTask")
    @ApiOperation("getGVMScanTask")
    public Result<GVMScanTask> getGVMScanTask(@RequestBody TaskIdDTO dto) {
        return Result.ok(gsaClientAgentService.getGVMScanTask(dto.getTaskId()));
    }

    @PostMapping("/getReport")
    @ApiOperation("getReport")
    public Result<String> getReport(@RequestBody ReportIdDTO dto) {
        JSONObject report = gsaClientAgentService.getReport(dto.getReportId());
        return Result.ok(report!=null?report.toString():"");
    }

    @PostMapping("/getAllReport")
    @ApiOperation("这个接口还没写")
    public Result<String> getAllReport() {
        return null;
    }

    @PostMapping("/executeTask")
    @ApiOperation("executeTask(入参是taskId)")
    public Result<Boolean> executeTask(@RequestBody TaskIdDTO dto) {
        return Result.ok(gsaClientAgentService.executeTask(dto.getTaskId()));
    }

    @PostMapping("/executeTasks")
    @ApiOperation("executeTasks(入参是taskList)")
    public Result<String> executeTasks(@RequestBody TaskListDTO dto) {
        gsaClientAgentService.executeTasks(dto.getTaskList());
        return Result.ok("成功");
    }

    @PostMapping("/getGVMAssetIdByIp")
    @ApiOperation("getGVMAssetIdByIp(入参是IP)")
    public Result<String> getGVMAssetIdByIp(@RequestBody IpDTO dto) {
        return Result.ok(gsaClientAgentService.getGVMAssetIdByIp(dto.getIp()));
    }

    @PostMapping("/getGVMTargetIdByIp")
    @ApiOperation("getGVMTargetIdByIp(入参是IP)")
    public Result<String> getGVMTargetIdByIp(@RequestBody IpDTO dto) {
        return Result.ok(gsaClientAgentService.getGVMTargetIdByIp(dto.getIp()));
    }

    @PostMapping("/getGVMTaskIdByIp")
    @ApiOperation("getGVMTaskIdByIp(入参是IP)")
    public Result<String> getGVMTaskIdByIp(@RequestBody IpDTO dto) {
        return Result.ok(gsaClientAgentService.getGVMTaskIdByIp(dto.getIp()));
    }

    @PostMapping("/getTaskProgress")
    @ApiOperation("getTaskProgress(入参是taskId)")
    public Result<Integer> getTaskProgress(@RequestBody TaskIdDTO dto) {
        return Result.ok(gsaClientAgentService.getTaskProgress(dto.getTaskId()));
    }

    @PostMapping("/getCommandQueue")
    @ApiOperation("getCommandQueue")
    public Result<Queue<GSACommand>> getCommandQueue() {
        return Result.ok(gsaClientAgentService.getCommandQueue());
    }

    @PostMapping("/getAggregateForBusiTask")
    @ApiOperation("getAggregateForBusiTask")
    public Result<Integer> getAggregateForBusiTask() {
        return Result.ok(gsaClientAgentService.getAggregateForBusiTask());
    }

    @PostMapping("/executeTaskByHostIP")
    @ApiOperation("executeTaskByHostIP")
    public Result<Boolean> executeTaskByHostIP(@RequestBody HostDTO dto) {
        return Result.ok(gsaClientAgentService.executeTaskByHostIP(dto.getHost()));
    }

    @PostMapping("/getTaskProgressByHostIP")
    @ApiOperation("getTaskProgressByHostIP")
    public Result<String> getTaskProgressByHostIP(@RequestBody HostDTO dto) {
        return Result.ok(gsaClientAgentService.getTaskProgressByHostIP(dto.getHost()));
    }

    @PostMapping("/getReportByHostIP")
    @ApiOperation("getReportByHostIP")
    public Result<String> getReportByHostIP(@RequestBody HostDTO dto) {
        JSONObject reportByHostIP = gsaClientAgentService.getReportByHostIP(dto.getHost());
        return Result.ok(reportByHostIP!=null?reportByHostIP.toString():"");
    }

    @PostMapping("/getTaskByHostIP")
    @ApiOperation("getTaskByHostIP")
    public Result<String> getTaskByHostIP(@RequestBody HostDTO dto) {
        JSONObject taskByHostIP = gsaClientAgentService.getTaskByHostIP(dto.getHost());
        return Result.ok(taskByHostIP!=null?taskByHostIP.toString():"");
    }

}
