package com.gem.loganalysis.controller;

import cn.hutool.core.date.DateUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.gem.loganalysis.model.PageRequest;
import com.gem.loganalysis.model.PageResponse;
import com.gem.loganalysis.model.Result;
import com.gem.loganalysis.model.dto.GetDTO;
import com.gem.loganalysis.model.dto.query.VulnerabilityQueryDTO;
import com.gem.loganalysis.model.entity.Asset;
import com.gem.loganalysis.model.vo.HostSeverityVO;
import com.gem.loganalysis.model.vo.HostVO;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityJson;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityScanningVO;
import com.gem.loganalysis.scanner.Scanner;
import com.gem.loganalysis.util.SeverityUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import static com.gem.loganalysis.util.UserUtil.getLoginUserOrgId;

@Api(tags = "风险模块 - 漏洞扫描")
@RestController
@RequestMapping("/sop/vulnerability")
@Validated
public class VulnerabilityController {


    @PostMapping("/vulnerabilityScannerResult")
    @ApiOperation("漏洞扫描结果")
    public Result<PageResponse<VulnerabilityScanningVO>> getVulnerabilityScannerResult(@RequestBody PageRequest<VulnerabilityQueryDTO> dto) {
        try {
            // 使用ClassLoader加载资源文件
            InputStream inputStream = SeverityUtil.class.getClassLoader().getResourceAsStream("ScanResultBySeverity.json");

            // 将InputStream转换为字符串
            StringBuilder stringBuilder = new StringBuilder();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                stringBuilder.append(new String(buffer, 0, bytesRead));
            }
            String jsonString = stringBuilder.toString();
            ObjectMapper mapper = new ObjectMapper();
            VulnerabilityJson dataStructure = mapper.readValue(jsonString, VulnerabilityJson.class);
            // 关闭输入流
            inputStream.close();
            // 处理解析后的数据结构对象
            List<VulnerabilityScanningVO> resultList = dataStructure.getResults();
            // 模糊查询后输出
            VulnerabilityQueryDTO data = dto.getData();
            List<VulnerabilityScanningVO> filteredResults = new ArrayList<>();
            for (VulnerabilityScanningVO result : resultList) {
                boolean isMatched = true;
                if (StringUtils.isNotBlank(data.getHostIp()) && !result.getHost_ip().contains(data.getHostIp())) {
                    isMatched = false;
                }
                if (StringUtils.isNotBlank(data.getName()) && !result.getName().contains(data.getName())) {
                    isMatched = false;
                }
                if (StringUtils.isNotBlank(data.getPort()) && !result.getPort().contains(data.getPort())) {
                    isMatched = false;
                }
                if (isMatched) {
                    filteredResults.add(result);
                }
            }
            // 按照 severity 进行排序
            filteredResults.sort(Comparator.comparing(VulnerabilityScanningVO::getSeverity).reversed());
            Integer pageNum = dto.getPageNum();
            Integer pageSize = dto.getPageSize();

            // 计算索引范围
            int startIndex = (pageNum - 1) * pageSize;
            int endIndex = Math.min(startIndex + pageSize, filteredResults.size());

            // 截取指定页的数据
            List<VulnerabilityScanningVO> paginatedResults = filteredResults.subList(startIndex, endIndex);
            PageResponse response = new PageResponse();
            response.setRecords(paginatedResults);
            response.setTotal(filteredResults.size());
            return Result.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            return Result.failed("处理失败");
        }
    }

}
