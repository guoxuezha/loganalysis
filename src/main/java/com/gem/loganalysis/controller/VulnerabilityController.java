package com.gem.loganalysis.controller;

import cn.hutool.core.date.DateUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.gem.loganalysis.model.Result;
import com.gem.loganalysis.model.dto.GetDTO;
import com.gem.loganalysis.model.entity.Asset;
import com.gem.loganalysis.model.vo.HostSeverityVO;
import com.gem.loganalysis.model.vo.HostVO;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityJson;
import com.gem.loganalysis.model.vo.vulnerability.VulnerabilityScanningVO;
import com.gem.loganalysis.scanner.Scanner;
import com.gem.loganalysis.util.SeverityUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.io.InputStream;
import java.util.Date;
import java.util.List;

import static com.gem.loganalysis.util.UserUtil.getLoginUserOrgId;

@Api(tags = "风险模块 - 漏洞扫描")
@RestController
@RequestMapping("/sop/vulnerability")
@Validated
public class VulnerabilityController {


  /*  @PostMapping("/vulnerabilityScannerResult")
    @ApiOperation("漏洞扫描结果")
    public Result<List<VulnerabilityScanningVO>> getVulnerabilityScannerResult() {




        return Result.ok("扫描成功");
    }*/

    public static void main(String[] args) {
        try {
            // 使用ClassLoader加载资源文件
            InputStream inputStream = SeverityUtil.class.getClassLoader().getResourceAsStream("ScanResultBySeverity.json");

            // 将InputStream转换为字符串
            StringBuilder stringBuilder = new StringBuilder();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                stringBuilder.append(new String(buffer, 0, bytesRead));
            }
            String jsonString = stringBuilder.toString();



            ObjectMapper mapper = new ObjectMapper();
            VulnerabilityJson dataStructure = mapper.readValue(jsonString, VulnerabilityJson.class);
            System.out.println(dataStructure);
            // 处理解析后的数据结构对象

            // 示例输出


            // 关闭输入流
            inputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


}
